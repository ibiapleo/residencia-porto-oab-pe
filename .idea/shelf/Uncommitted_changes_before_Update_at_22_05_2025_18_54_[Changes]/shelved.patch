Index: backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/dto/TransparenciaRequestDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.portodigital.residencia.oabpe.domain.transparencia.dto;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.time.LocalDate;\r\n\r\n@Data\r\npublic class TransparenciaRequestDTO {\r\n    private Long idDemonst;\r\n    private String referencia;\r\n    private String ano;\r\n    private String periodicidade;\r\n    private LocalDate dtPrevEntr;\r\n    private LocalDate dtEntrega;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/dto/TransparenciaRequestDTO.java b/backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/dto/TransparenciaRequestDTO.java
--- a/backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/dto/TransparenciaRequestDTO.java	(revision 18fa25a1892037390df5df53210ffe00f0f7cefa)
+++ b/backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/dto/TransparenciaRequestDTO.java	(date 1747695532839)
@@ -1,15 +1,26 @@
 package org.portodigital.residencia.oabpe.domain.transparencia.dto;
 
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import lombok.Data;
-
 import java.time.LocalDate;
 
 @Data
 public class TransparenciaRequestDTO {
+    @NotNull(message = "ID do demonstrativo é obrigatório")
     private Long idDemonst;
+
+    @NotBlank(message = "Referência é obrigatória")
     private String referencia;
+
+    @NotBlank(message = "Ano é obrigatório")
     private String ano;
+
+    @NotBlank(message = "Periodicidade é obrigatória")
     private String periodicidade;
+
+    @NotNull(message = "Data prevista de entrega é obrigatória")
     private LocalDate dtPrevEntr;
+
     private LocalDate dtEntrega;
-}
+}
\ No newline at end of file
Index: backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/TransparenciaController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.portodigital.residencia.oabpe.domain.transparencia;\r\n\r\nimport io.swagger.v3.oas.annotations.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.portodigital.residencia.oabpe.domain.transparencia.dto.TransparenciaRequestDTO;\r\nimport org.portodigital.residencia.oabpe.domain.transparencia.dto.TransparenciaResponseDTO;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/transparencia\")\r\n@RequiredArgsConstructor\r\npublic class TransparenciaController {\r\n\r\n    private final TransparenciaService transparenciaService;\r\n\r\n    @GetMapping\r\n    public ResponseEntity<Page<TransparenciaResponseDTO>> getAll(Pageable pageable) {\r\n        return ResponseEntity.ok(transparenciaService.getAll(pageable));\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<TransparenciaResponseDTO> getById(@PathVariable Long id) {\r\n        return ResponseEntity.ok(transparenciaService.getById(id));\r\n    }\r\n\r\n    @PostMapping\r\n    public ResponseEntity<TransparenciaResponseDTO> create(@RequestBody TransparenciaRequestDTO request) {\r\n        return ResponseEntity.status(201).body(transparenciaService.create(request));\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<TransparenciaResponseDTO> update(\r\n            @PathVariable Long id, @RequestBody TransparenciaRequestDTO request) {\r\n        return ResponseEntity.ok(transparenciaService.update(id, request));\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\r\n        transparenciaService.delete(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/TransparenciaController.java b/backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/TransparenciaController.java
--- a/backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/TransparenciaController.java	(revision 18fa25a1892037390df5df53210ffe00f0f7cefa)
+++ b/backend/src/main/java/org/portodigital/residencia/oabpe/domain/transparencia/TransparenciaController.java	(date 1747706961074)
@@ -1,45 +1,47 @@
 package org.portodigital.residencia.oabpe.domain.transparencia;
 
 import io.swagger.v3.oas.annotations.*;
+import io.swagger.v3.oas.annotations.responses.ApiResponse;
+import io.swagger.v3.oas.annotations.responses.ApiResponses;
+import io.swagger.v3.oas.annotations.tags.Tag;
+import jakarta.validation.Valid;
 import lombok.RequiredArgsConstructor;
+import lombok.Value;
+import org.portodigital.residencia.oabpe.domain.transparencia.dto.TransparenciaFilteredRequest;
 import org.portodigital.residencia.oabpe.domain.transparencia.dto.TransparenciaRequestDTO;
 import org.portodigital.residencia.oabpe.domain.transparencia.dto.TransparenciaResponseDTO;
+import org.springdoc.core.annotations.ParameterObject;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.web.bind.annotation.*;
 
 @RestController
-@RequestMapping("/transparencia")
+@RequestMapping("/v1/transparencia")
 @RequiredArgsConstructor
+@Tag(name = "Transparencia", description = "Gerencia registros de transparencia")
 public class TransparenciaController {
 
     private final TransparenciaService transparenciaService;
 
+    @Operation(
+            summary = "Listar registros de transparência.",
+            description = "Retornar uma lista paginada de todos os registros de transparência cadastrados"
+    )
+    @ApiResponses({
+            @ApiResponse(responseCode = "200", description = "Lista recuperada com sucesso"),
+            @ApiResponse(responseCode = "403", description = "Acesso não autorizado")
+    })
     @GetMapping
-    public ResponseEntity<Page<TransparenciaResponseDTO>> getAll(Pageable pageable) {
-        return ResponseEntity.ok(transparenciaService.getAll(pageable));
-    }
-
-    @GetMapping("/{id}")
-    public ResponseEntity<TransparenciaResponseDTO> getById(@PathVariable Long id) {
-        return ResponseEntity.ok(transparenciaService.getById(id));
-    }
-
-    @PostMapping
-    public ResponseEntity<TransparenciaResponseDTO> create(@RequestBody TransparenciaRequestDTO request) {
-        return ResponseEntity.status(201).body(transparenciaService.create(request));
-    }
+    @PreAuthorize("hasPermission('modulo_transparencia', 'LEITURA')")
+    public ResponseEntity<Page<TransparenciaResponseDTO>> getAllFiltered(
+            @Parameter(description = "Parâmetros de filtragem")
+            @Valid @ParameterObject TransparenciaFilteredRequest filter,
+            @Parameter(description = "Parâmetros de paginação (page, size, sort)")
+            Pageable pageable) {
+        return ResponseEntity.ok(transparenciaService.getAllFiltered(filter, pageable));
 
-    @PutMapping("/{id}")
-    public ResponseEntity<TransparenciaResponseDTO> update(
-            @PathVariable Long id, @RequestBody TransparenciaRequestDTO request) {
-        return ResponseEntity.ok(transparenciaService.update(id, request));
     }
 
-    @DeleteMapping("/{id}")
-    public ResponseEntity<Void> delete(@PathVariable Long id) {
-        transparenciaService.delete(id);
-        return ResponseEntity.noContent().build();
-    }
 }
